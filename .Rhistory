source('~/Downloads/ISIPTA 19/images/isipta19.R', echo=TRUE)
?optim
f = function(x, n)  sum(x ^ 2) / (n - 1) - sum(x) ^ 2 / (n ^ 2 - n)
require(graphics)
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
grr <- function(x) { ## Gradient of 'fr'
x1 <- x[1]
x2 <- x[2]
c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
200 *      (x2 - x1 * x1))
}
optim(c(-1.2,1), fr)
(res <- optim(c(-1.2,1), fr, grr, method = "BFGS"))
optimHess(res$par, fr, grr)
optim(c(-1.2,1), fr, NULL, method = "BFGS", hessian = TRUE)
## These do not converge in the default number of steps
optim(c(-1.2,1), fr, grr, method = "CG")
optim(c(-1.2,1), fr, grr, method = "CG", control = list(type = 2))
optim(c(-1.2,1), fr, grr, method = "L-BFGS-B")
g = function(x, n) sapply(1:length(x), function (i) (2 * (x[i] - mean(x))) / (n - 1))
g(rep(2, 5), 5)
g(c(1, 2, 3, 4, 5), 5)
f(c(1, 2, 3, 4, 5), 5)
sd(c(1, 2, 3, 4, 5))
sd(c(1, 2, 3, 4, 5)) ^ 2
obs = rnorm(10, 15, 1)
obs
low = obs - 0.5 * 10 ^ (-6)
low
up = obs + 0.4 * 10 ^ (-6)
check = optim(obs, f, g, lower = low, upper = up)
f = function(x)  sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x))
g = function(x) sapply(1:length(x), function (i) (2 * (x[i] - mean(x))) / (length(x) - 1))
obs = rnorm(10, 15, 1)
low = obs - 0.5 * 10 ^ (-6)
up = obs + 0.4 * 10 ^ (-6)
?constrOptim
check = optim(obs, f, g, lower = low, upper = up, method = "L-BFGS-B")
check
f(obs)
check = optim(obs, -f, -g, lower = low, upper = up, method = "L-BFGS-B")
check = optim(obs, -f, g, lower = low, upper = up, method = "L-BFGS-B")
negf = -f
negf = function(x)  - sum(x ^ 2) / (length(x) - 1) + sum(x) ^ 2 / (length(x) ^ 2 - length(x))
negg = function(x) sapply(1:length(x), function (i) (2 * (- x[i] + mean(x))) / (length(x) - 1))
negcheck = optim(obs, negf, negg, lower = low, upper = up, method = "L-BFGS-B")
negcheck
f = function(x)  sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x))
g = function(x) sapply(1:length(x), function (i) (2 * (x[i] - mean(x))) / (length(x) - 1))
negf = function(x)  - sum(x ^ 2) / (length(x) - 1) + sum(x) ^ 2 / (length(x) ^ 2 - length(x))
negg = function(x) sapply(1:length(x), function (i) (2 * (- x[i] + mean(x))) / (length(x) - 1))
obs = rnorm(100, 15, 1)
low = obs - 0.5 * 10 ^ (-6)
up = obs + 0.4 * 10 ^ (-6)
check = optim(obs, f, g, lower = low, upper = up, method = "L-BFGS-B")
check$value
negcheck = optim(obs, negf, negg, lower = low, upper = up, method = "L-BFGS-B")
-negcheck$value
f(x)
f(obs)
(-negcheck$value - f(obs))/f(obs)
source('~/.active-rstudio-document', echo=TRUE)
sd(x) ^ 2
sd(obs) ^ 2
obs
plot(obs)
plot(obs, cex = 0.3)
source('~/.active-rstudio-document', echo=TRUE)
sd(obs) ^ 2
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(obs, cex = 0.3)
abline(v = mean(obs))
plot(obs, cex = 0.3)
abline(h = mean(obs))
source('~/.active-rstudio-document', echo=TRUE)
plot(obs, cex = 0.3)
abline(h = mean(obs))
abline(h = checkmean$value, col = 2, lty = 2)
abline(h = -negcheckmean$value, col = 2, lty = 2)
abline(h = sd(obs))
abline(h = -sd(obs))
abline(h = -negchecksd$value, col = 2, lty = 2)
abline(h = checksd$value, col = 2, lty = 2)
plot(obs, cex = 0.3)
abline(h = mean(obs))
abline(h = checkmean$value, col = 2, lty = 2)
abline(h = -negcheckmean$value, col = 2, lty = 2)
abline(h = sd(obs))
abline(h = -sd(obs))
abline(h = -negchecksd$value, col = 2, lty = 2)
abline(h = negchecksd$value, col = 2, lty = 2)
source('~/.active-rstudio-document', echo=TRUE)
plot(obs, cex = 0.3)
abline(h = mean(obs))
abline(h = -negcheckmean$value, col = 2, lty = 2)
abline(h = checkmean$value, col = 2, lty = 2)
abline(h = mean(obs) + sd(obs))
abline(h = mean(obs) - sd(obs))
abline(h = checkmean$value + negchecksd$value, col = 2, lty = 2)
abline(h = -negcheckmean$value - negchecksd$value, col = 2, lty = 2)
abs(sd(obs) - abs(negchecksd$value))
abs(sd(obs) - abs(negchecksd$value)) / sd(obs)
abs(mean(obs) - abs(negcheckmean$value)) / mean(obs)
source('~/.active-rstudio-document', echo=TRUE)
obs
obs[1]
round(obs[1], 5)
0.00006
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
output = list("mean" = mean(obs), "maxmean" = -negcheckmean$value, "minmean" = checkmean$value,
"sd" = sd(obs), "maxsd" = -negchecksd$value, "minsd" = checksd$value)
output
output = as.data.frame("mean" = mean(obs), "maxmean" = -negcheckmean$value, "minmean" = checkmean$value,
"sd" = sd(obs), "maxsd" = -negchecksd$value, "minsd" = checksd$value)
output = as.data.frame(list("mean" = mean(obs), "maxmean" = -negcheckmean$value, "minmean" = checkmean$value,
"sd" = sd(obs), "maxsd" = -negchecksd$value, "minsd" = checksd$value))
output
meansd = function(i){
# functions for optimising standard deviation and mean
fsd = function(x)  sqrt(sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x)))
negfsd = function(x)  - sqrt(sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x)))
gsd = function(x) sapply(1:length(x), function (i)
(x[i] - mean(x)) / ((length(x) - 1) * sqrt(sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x)))))
neggsd = function(x) sapply(1:length(x), function (i)
- (x[i] - mean(x)) / ((length(x) - 1) * sqrt(sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x)))))
fmean = function(x) mean(x)
negfmean = function(x) - mean(x)
gmean = function(x) sapply(1:length(x), function(i) 1 / length(x))
neggmean = function(x) sapply(1:length(x), function(i) - 1 / length(x))
# simulated observations rounded upto 5 digit after decimal
obs = round(rnorm(100, 0, .0001), 5)
low = obs - 0.5 * 10 ^ (-6)
up = obs + 0.4 * 10 ^ (-6)
# mean optimisation
checkmean = optim(obs, fmean, gmean, lower = low, upper = up, method = "L-BFGS-B")
negcheckmean = optim(obs, negfmean, neggmean, lower = low, upper = up, method = "L-BFGS-B")
-negcheckmean$value
mean(obs)
checkmean$value
# standard deviation optimisation
checksd = optim(obs, fsd, gsd, lower = low, upper = up, method = "L-BFGS-B")
negchecksd = optim(obs, negfsd, neggsd, lower = low, upper = up, method = "L-BFGS-B")
-negchecksd$value
sd(obs)
checksd$value
# percentage difference in mean and standard deviation
100 * abs(abs(mean(obs)) - abs(negcheckmean$value)) / abs(mean(obs))
100 * abs(sd(obs) - abs(negchecksd$value)) / sd(obs)
output = as.data.frame(list("mean" = mean(obs), "maxmean" = -negcheckmean$value, "minmean" = checkmean$value,
"sd" = sd(obs), "maxsd" = -negchecksd$value, "minsd" = checksd$value))
return(output)
}
meansd(1)
meansd(2)
meansd(3)
meansd = function(i){
# functions for optimising standard deviation and mean
fsd = function(x)  sqrt(sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x)))
negfsd = function(x)  - sqrt(sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x)))
gsd = function(x) sapply(1:length(x), function (i)
(x[i] - mean(x)) / ((length(x) - 1) * sqrt(sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x)))))
neggsd = function(x) sapply(1:length(x), function (i)
- (x[i] - mean(x)) / ((length(x) - 1) * sqrt(sum(x ^ 2) / (length(x) - 1) - sum(x) ^ 2 / (length(x) ^ 2 - length(x)))))
fmean = function(x) mean(x)
negfmean = function(x) - mean(x)
gmean = function(x) sapply(1:length(x), function(i) 1 / length(x))
neggmean = function(x) sapply(1:length(x), function(i) - 1 / length(x))
# simulated observations rounded upto 5 digit after decimal
obs = round(rnorm(100, 0, .001), 5)
low = obs - 0.5 * 10 ^ (-6)
up = obs + 0.4 * 10 ^ (-6)
# mean optimisation
checkmean = optim(obs, fmean, gmean, lower = low, upper = up, method = "L-BFGS-B")
negcheckmean = optim(obs, negfmean, neggmean, lower = low, upper = up, method = "L-BFGS-B")
-negcheckmean$value
mean(obs)
checkmean$value
# standard deviation optimisation
checksd = optim(obs, fsd, gsd, lower = low, upper = up, method = "L-BFGS-B")
negchecksd = optim(obs, negfsd, neggsd, lower = low, upper = up, method = "L-BFGS-B")
-negchecksd$value
sd(obs)
checksd$value
# percentage difference in mean and standard deviation
100 * abs(abs(mean(obs)) - abs(negcheckmean$value)) / abs(mean(obs))
100 * abs(sd(obs) - abs(negchecksd$value)) / sd(obs)
output = as.data.frame(list("mean" = mean(obs), "maxmean" = -negcheckmean$value, "minmean" = checkmean$value,
"sd" = sd(obs), "maxsd" = -negchecksd$value, "minsd" = checksd$value))
return(output)
}
meansd(1)
source('~/.active-rstudio-document', echo=TRUE)
meansd(!)
meansd(1)
source('~/.active-rstudio-document', echo=TRUE)
meansd(1)
check = sapply(1:100, meansd)
check
t(check)
check = tapply(1:100, meansd)
?applu
?apply
check = lapply(1:100, meansd)
check
source('~/.active-rstudio-document', echo=TRUE)
check
check[1,]
source('~/.active-rstudio-document', echo=TRUE)
check
check[1]
source('~/.active-rstudio-document', echo=TRUE)
check
source('~/.active-rstudio-document', echo=TRUE)
check
source('~/.active-rstudio-document', echo=TRUE)
head(check)
check = t(sapply(1:100, meansd))
check
source('~/.active-rstudio-document', echo=TRUE)
check
plot(check[1,])
plot(check[,1])
plot(check[,1], ylim = c(-3e-5, 3e-5))
points(check[,2], col = 2)
plot(check[,1], ylim = c(-3e-5, 3e-5), cex = 0.2)
points(check[,2], col = 2, cex = 0.2)
points(check[,3], col = 3, cex = 0.2)
qqnorm(check[,1], ylim = c(-3e-5, 3e-5), cex = 0.2)
qqnorm(check[,2], ylim = c(-3e-5, 3e-5), cex = 0.2, col = 2)
boxplot(check[,4])
source('~/.active-rstudio-document', echo=TRUE)
boxplot(check[,4])
mean(check[,1])
source('~/.active-rstudio-document', echo=TRUE)
boxplot(check[, check[,4]<100])
boxplot(check[, which(check[,4]<100)])
boxplot(check[check[,4]<100, 4])
mean(check[check[,4]<100, 4])
median(check[check[,4]<100, 4])
constrOptim
library(bootlasso)
cd_optim
fn = function(x) sum((x - 1)^2)
df = function(x) 2(x - 1)
SubgradOptim(rep(0,10), fn, df, "sg")
library(SubgradOptim)
SubgradOptim(rep(0,10), fn, df, "sg")
df = function(x) 2 * (x - 1)
SubgradOptim(rep(0,10), fn, df, "sg")
SubgradOptim(rep(0,10), fn, df, "sg", maxit = 1e4)
SubgradOptim(rep(0,10), fn, df, "sg", maxit = 2e4)
SubgradOptim(rep(0,10), fn, df, "sg", maxit = 2e4, tol = 1e-7)
source('~/github/SubgradOptim/R/optim.R', echo=TRUE)
setwd("github/SubgradOptim/")
setwd("R")
library(devtools)
library(roxygen2)
document()
setwd("..")
install("SubgradOptim")
setwd("..")
install("SubgradOptim")
source('~/R/optim_test.R', echo=TRUE)
source('~/github/SubgradOptim/R/optim.R', echo=TRUE)
#################################################################################
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 10000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 10000, h = 0.001,
prox(lambda), acl = T, theta_it = theta_it)
source('~/github/SubgradOptim/R/optim.R', echo=TRUE)
#################################################################################
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = T, theta_it = theta_it)
source('~/github/SubgradOptim/R/optim.R', echo=TRUE)
#################################################################################
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = T, theta_it = theta_it)
source('~/github/SubgradOptim/R/optim.R', echo=TRUE)
#################################################################################
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = T, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "sg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "cd", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
source('~/github/SubgradOptim/R/optim.R', echo=TRUE)
SubgradOptim(rep(0,6), fn, df, "sg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
#################################################################################
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = T, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "cd", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
source('~/github/SubgradOptim/R/optim.R', echo=TRUE)
#################################################################################
SubgradOptim(rep(0,6), fn, df, "cd", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
#################################################################################
SubgradOptim(rep(0,6), fn, df, "sg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = T, theta_it = theta_it)
SubgradOptim(rep(0,6), fn, df, "cd", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
setwd("SubgradOptim/R")
document()
source('~/github/SubgradOptim/R/optim.R', echo=TRUE)
document()
setwd("..")
setwd("..")
install(nonsmoothOptim)
install(nonsmoothoptim)
setwd("nonsmoothOptim/")
install(nonsmoothoptim)
install_github("tathagatabasu/nonsmoothOptim")
install_github("tathagatabasu/nonsmoothOptim")
install_github("tathagatabasu/nonsmoothOptim", force = T)
#library(devtools)
#install_github("tathagatabasu/SubgradOptim")
library(SubgradOptim)
#library(devtools)
#install_github("tathagatabasu/SubgradOptim")
library(nonsmoothOptim)
setwd("..")
library(devtools)
install(nonsmoothOptim)
library(roxygen2)
create("nonsmoothOptim")
install(nonsmoothOptim)
install("nonsmoothOptim")
library(nonsmoothOptim)
remove.packages("SubgradOptim")
library(nonsmoothOptim)
library(nonsmoothOptim)
library(devtools)
install_github("tathagatabasu/nonsmoothOptim")
?nonsmoothOptim
source('~/R/optim_test.R', echo=TRUE)
nonsmoothOptim(rep(0,6), fn, df, "sg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
nonsmoothOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
nonsmoothOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = T, theta_it = theta_it)
nonsmoothOptim(rep(0,6), fn, df, "cd", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
fn = function(x) sum(abs(x) + 5)
df = function(x) sign(x)
SubgradOptim(rep(0,10), fn, df, "sg", maxit = 2e4, tol = 1e-7)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 2e4, tol = 1e-7)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-7)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
source('~/R/optim_test.R', echo=TRUE)
fn(0)
fn(rep(0,10))
fn = function(x) sum(abs(x)) + 5
df = function(x) sign(x)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
install_github("tathagatabasu/nonsmoothOptim")
install_github("tathagatabasu/nonsmoothOptim",  force = T)
library(nonsmoothOptim)
function(){
x = matrix(data = rnorm(1200), nrow = 50, ncol = 6)
b = as.matrix(rep(c(-3,-2,-1,1,2,3), 1))
er = as.matrix(rnorm(50))
y = x %*% b + er
lambda = 0
###########################################################################
square_f = function(x, y, beta)
sum((y - x %*% beta)^2) / (2 * nrow(x))
square_df = function(x, y, beta)
-t(x) %*% (y - x %*% beta) / nrow(x)
lasso_f = function(lambda, beta) lambda * sum(abs(beta))
lasso_df = function(lambda, beta) lambda * sign(beta)
square_lasso_f = function(lambda, x, y, beta)
square_f(x, y, beta) + lasso_f(lambda, beta)
square_lasso_df = function(lambda, x, y, beta)
square_df(x, y, beta) + lasso_df(lambda, beta)
prox = function(lambda) function(t, x) sign(x) * pmax(0, abs(x) - lambda * t)
soft  = function(lambda, wt)function(x, i) sign(x) * max(0, abs(x) - lambda * wt[i])
s = soft(lambda, rep(1,6))
st_f = function(i, x, y, beta)
t(x[,i]) %*% (y - x[,-i] %*% beta[-i]) / (t(x[,i]) %*% x[,i])
v = function(i, beta) st_f(i, x, y, beta)
theta_it = function(beta, i)s(v(i, beta), i)
fn = function(beta) square_lasso_f(lambda, x, y, beta)
df = function(beta) square_lasso_df(lambda, x, y, beta)
#################################################################################
nonsmoothOptim(rep(0,6), fn, df, "sg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
nonsmoothOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
nonsmoothOptim(rep(0,6), fn, df, "pg", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = T, theta_it = theta_it)
nonsmoothOptim(rep(0,6), fn, df, "cd", tol = 1e-5, maxit = 50000, h = 0.001,
prox(lambda), acl = FALSE, theta_it = theta_it)
}
fn = function(x) sum(abs(x)) + 5
df = function(x) sign(x)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
fn = function(x) sum(abs(x) - 2) + 5
df = function(x) sign(x - 2)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
fn(0)
fn(rep(0,10))
fn(rep(1,10))
fn(rep(-1,10))
df(rep(-1,10))
df(rep(1,10))
fn = function(x) sum(abs(x - 2)) + 5
df = function(x) sign(x - 2)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
df = function(x) sign(x)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
fn = function(x) sum(abs(x - 2)) + 5
df = function(x) sign(x - 2)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
fn = function(x) sum(abs(x - 1)) + 5
df = function(x) sign(x - 1)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
fn = function(x) sum(abs(x - 1:10)) + 5
df = function(x) sign(x - 1:10)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
fn = function(x) sum(abs(x + 1:10)) + 5
df = function(x) sign(x + 1:10)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 2e4, tol = 1e-5)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
nonsmoothOptim(rep(100,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
nonsmoothOptim(rep(10,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
nonsmoothOptim(rep(1,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
?nonsmoothOptim
?person
nonsmoothOptim
fn = function(x) sum(x ^ 2) + sum(abs(x + 1:10)) + 5
df = function(x) 2 * x + sign(x + 1:10)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
fn = function(x) sum((x + 1:10) ^ 2) + sum(abs(x + 1:10)) + 5
df = function(x) 2 * x + sign(x + 1:10)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
fn = function(x) sum((x + 1:10) ^ 2) + sum(abs(x + 1:10)) + 5
df = function(x) 2 * (x + 1:10) + sign(x + 1:10)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
library(devtools)
library(roxygen2)
setwd("R")
document()
document()
setwd("..")
setwd("..")
install("nonsmoothOptim")
?nonsmoothOptim
library(nonsmoothOptim)
?nonsmoothOptim
fn = function(x) sum((x + 1:10) ^ 2) + sum(abs(x + 1:10)) + 5
df = function(x) 2 * (x + 1:10) + sign(x + 1:10)
nonsmoothOptim(rep(0,10), fn, df, "sg", maxit = 5e4, tol = 1e-5)
optim(rep(0,10), fn, df)
?optim
optim(rep(0,10), fn, gr = df)
setwd("nonsmoothOptim/R")
library(devtools)
library(roxygen2)
document()
